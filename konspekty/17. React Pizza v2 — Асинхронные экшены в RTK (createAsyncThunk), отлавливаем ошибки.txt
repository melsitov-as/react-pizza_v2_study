asyncAwait
Асинхронные экшены
Как отлавливать ошибки которые приходят с бекенда - на этом закончил
Как вынести бизнес-логику из UI в отдельную часть

Куда вы выносите бизнес-логику?
Пишешь ли ты запросы на бэкенд, которые отвечают я сделаю вот это вот получу с бэкенда информацию и сделаю вот это вот - отображение пользователей или что-нибудь еще - вот это действие называется бизнес-логикой

Ответ: я иногда пишу ее в UI при необходимости когда нужно с помощью useEffect вызвать свой fetch-запрос
Иногда могут требовать, чтобы бизнес-логику ты выносил в отдельный код - сделать асинхронный action или вынести в отдельный файл там сделать отдельный метод его как-то использовать, который будет отвечать только за то, чтобы получать только пиццы и вернуть эти пиццы
Это бизнес-логика

Будем выносить бизнес-логику в redux и будем делать асинхронный action с помощью redux-toolkit

await не работает до тех пор пока ты не сделаешь главную родительскую функцию, в которой он используется асинхронной async

Когда пишешь redux-код все сайд-эффекты его не пиши внутри redux-кода

redux createAsyncThunk - позволяет создавать асинхронный экшн

нужно ли юзать всегда асинхронный экшен - не всегда
если ты хочешь сделать запрос на бекенд и еще параллельно в редаксе что-то поменять несколько разных действий, то идеально для этого подходит createAsyncThunk
если стоит задача чтобы просто сделать методы

вынесение бизнес логики из ui в отдельный компонент

создание слайса
создание асинхронных экшеном
можно создать свой reducer
кэшировать данные - create selector

