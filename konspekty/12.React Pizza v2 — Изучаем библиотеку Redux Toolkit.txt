Большие сайты большие приложение не делают на контексте их делают на стейт-менеджере
Хранилище данных, база данных для фронтенда
В памяти приложения создается хранилище и оно уже говорит где какие данные и оттуда эти данные приходят на разыне компоненты

в store хранится логика redux

в плане масштабируемости context - не лучшее решение

redux хранит одно глобальное состояние еще его называют хранилищем в грубой форме - базой данных но правильно его называть хранилищем данных
компонент, если ты меняешься то ты передавай данные не в компонент а в хранилище из хранилища они уже пойдут в компонент

redux работает с помощью контекста

коммит "Чтобы фильтрация хранилась в redux"

Чтобы категории не в useState хранились а внутри redux

react-redux - библиотека, в ней хранится логика, которая объединяет идею react и идею redux
redux можно использовать не только в реактов его можно применять где угодно - angular vue.js vanilla js
redux - это просто js-библиотека

создадим src->redux - тут будут хранится все файлы, связанные с redux
создать store.js
redux -> store.js

переменная store - это redux-хранилище тут хранится вся логика связанная с redux-toolkit


теперь ты должен обернуть свое приложение логикой redux

store возвращает redux-логику а redux - обычная js-библиотека она не умеет работать с реактом, она не знает, что такое реакт и для того чтобы redux и store подружить с реактом мы используем библиотеку react-redux благодаря этой библиотеке мы с помощью компонента <Provider> обернем наше хранилище

передай в <Provider> store={store}

Создай slice
slice - тут мы будем говорить "кладите", "уносите", "меняйте"  это один склад в этом складе своя жизнь своя история 
кусок с логикой, которую будет обрабатывать наше хранилище
-pizzaSlice - будет хранить только пиццы и всю логику, которая с ними связана
-cartSlice - будет хранить логику корзины
-filterSlice - будет хранить логику фильтрации


создать файл counterSlice.js - склад счетчика
сделаем filterSlice.js

счетчик(сайта redux)
у нас может быть множество хранилищ

в хранилище:
- у нас есть первое начальное состояние initialState
- далее мы создаем логику, которая будет обрабатывать наш state называем ее counterSlice
- чтобы сделать слайс мы создаем его с помощью функции counterSlice -> название слайса, первое состояние и методы обработчики стейта которые будут менять стейт
- вытащи из объекта методы - первый экспорт
reducer - отвечает за изменение стейта
actions - это действия

useSelector - отвечает за вытаскивание данных из хранилища это что-то вроде useContext
useDispatch - говорит сделай что-то

redux - старая версия
redux toolkit - новая версия она интуитивно понятней